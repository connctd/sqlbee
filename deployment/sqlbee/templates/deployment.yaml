apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    app.kubernetes.io/name: {{ template "sqlbee.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: sqlbee
      svc: sqlbee-injector
      app.kubernetes.io/name: {{ template "sqlbee.name" . }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: sqlbee
        svc: sqlbee-injector
        app.kubernetes.io/name: {{ template "sqlbee.name" . }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
    spec:
      containers:
      - name: sqlbee
        image: "{{ .Values.deployment.repo }}:{{ .Chart.AppVersion }}"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 5
{{ if .Values.deployment.resources }}
        resources:
{{ toYaml .Values.deployment.resources | indent 11 }}
{{ end }}
        ports:
        - containerPort: 443
        args:
        {{ if .Values.annotationRequired }}- -annotationRequired{{ end }}
        - "-cert=/certs/tls.crt"
        - "-key=/certs/tls.key"
        {{ if .Values.defaultInstance }}- "-instance={{ .Values.defaultInstance }}"{{ end }}
        - "-secret={{ .Values.cloudSQLCredentials }}"
        - "-loglevel={{ .Values.logLevel }}"
        volumeMounts:
        - name: webhook-certs
          mountPath: /certs
          readOnly: true
      volumes:
        - name: webhook-certs
          secret:
            secretName: {{ template "sqlbee.name" . }}-certs